// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    Not(in=instruction[15], out=notinstruction);
    Mux16(a=outALU, b=instruction, sel=notinstruction, out=outmux1);
    // ARegister
    Or(a=notinstruction, b=instruction[5], out=inARegister);
    ARegister(in=outmux1, load=inARegister, out=outARegister, out[0..14]=addressM);

    And(a=instruction[15], b=instruction[12], out=ARegisterANDMux);
    Mux16(a=outARegister, b=inM, sel=ARegisterANDMux, out=ARegisterMux);
    // DRegister
    And(a=instruction[15], b=instruction[4], out=inDRegister);
    DRegister(in=outALU, load=inDRegister, out=outDRegister);
    // ALU
    ALU(x=outDRegister, y=ARegisterMux, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, out=outM, zr=outZR, ng=outNG);
    // writeM
    And(a=instruction[15], b=instruction[3], out=writeM);
    // notZR and notNG
    Not(in=outZR, out=notZR);
    Not(in=outNG, out=notNG);
    // notZR and notNG and JGT load
    And(a=instruction[15], b=instruction[0], out=JGT);
    And(a=notZR, b=notNG, out=notZRANDnotNG);
    And(a=JGT, b=notZRANDnotNG, out=load1);
    // ng and JLT load
    And(a=instruction[15], b=instruction[2], out=JLT);
    And(a=JLT, b=outNG, out=load2);
    // zr and JEQ load
    And(a=instruction[15], b=instruction[1], out=JEQ);
    And(a=JEQ, b=outZR, out=load3);
    // choosing the load for the pc
    Or(a=load1, b=load2, out=load4);
    Or(a=load3, b=load4, out=load);
    // PC
    PC(in=outARegister, load=load, inc=true, reset=reset, out[0..14]=pc);
}
